package control;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

import dao.DAOConexaoSingleton;
import list.ListPersonagensObra;
import model.Fabricante;
import model.Personagem;
import obrachildren.obravisualchildren.Game;
import obrachildren.obravisualchildren.Serie;

public class CtrSerie implements ListPersonagensObra, TableModel {

	private Serie serie;
	private List<Serie> listaSeries;
	private Connection conex;
	
	public CtrSerie() {
		listaSeries = new ArrayList<>();
		conex = DAOConexaoSingleton.getInstanciaUnica().getConexao();
		serie = new Serie();
	}
	
	public void adicionarSerie(Serie s) {
		String sql = "INSERT INTO serie (id, titulo, ano, genero, distribuidora, "
				+ "franquia, numEpisodios, numTemporadas, tipoSerie) "
				+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
		
		try {
			PreparedStatement statem = conex.prepareStatement(sql);
			statem.setInt(1, s.getId());
			statem.setString(2, s.getTitulo());
			statem.setInt(3, s.getAno());
			statem.setString(4, s.getGenero());
			statem.setString(5, s.getDistribuidora());
			statem.setString(6, s.getFranquia());
			statem.setInt(7, s.getNumEpisodios());
			statem.setInt(8, s.getNumTemporadas());
			statem.setString(9, s.getTipoSerie());
			statem.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void alterarSerie(Serie s) {
		String sql = "UPDATE serie SET id = ?, titulo = ?, ano = ?, genero = ?, "
				+ "distribuidora = ?, franquia = ?, numEpisodios = ?, numTemporadas = ? "
				+ "tipoSerie = ?";
		
		try {
			PreparedStatement statem = conex.prepareStatement(sql);
			statem.setInt(1, s.getId());
			statem.setString(2, s.getTitulo());
			statem.setInt(3, s.getAno());
			statem.setString(4, s.getGenero());
			statem.setString(5, s.getDistribuidora());
			statem.setString(6, s.getFranquia());
			statem.setInt(7, s.getNumEpisodios());
			statem.setInt(8, s.getNumTemporadas());
			statem.setString(9, s.getTipoSerie());
			statem.executeUpdate();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public Serie excluirSerie(Serie s) {
		String sql = "DELETE FROM serie WHERE id = ?";

		try {
			PreparedStatement statem = conex.prepareStatement(sql);
			statem.setInt(1, s.getId());
			statem.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return s;
	}
	
	public List<Serie> consultarSerie(String titulo) {
		listaSeries = new ArrayList<Serie>();
		String sql = "SELECT * FROM serie WHERE titulo LIKE ?";
		
		try {
			PreparedStatement statem = conex.prepareStatement(sql);
			statem.setString(1, "%" + titulo + "%");
			ResultSet rs = statem.executeQuery();
			
			while(rs.next()) {
				Serie s = new Serie();
				
				s.setId(rs.getInt("id"));
				s.setTitulo(rs.getString("titulo"));
				s.setAno(rs.getInt("ano"));
				s.setGenero(rs.getString("genero"));
				s.setDistribuidora(rs.getString("distribuidora"));
				s.setFranquia(rs.getString("franquia"));
				s.setNumEpisodios(rs.getInt("numEpisodios"));
				s.setNumTemporadas(rs.getInt("numTemporadas"));
				s.setTipoSerie(rs.getString("diretor"));
				listaSeries.add(s);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return listaSeries;
	}
	
	public int contarSeries() {
		int contagem = 0;
		
		
		
		return contagem;
	}

	@Override
	public List<Personagem> instanciarLista() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void adicionarArma(Personagem p) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void listarArmas(String tituloObra) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Personagem removerArma(Personagem p) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void addTableModelListener(TableModelListener l) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Class<?> getColumnClass(int columnIndex) {
		// TODO Auto-generated method stub
		switch (columnIndex) {
		
			case 0: return Integer.class;
			case 1: return String.class;
			case 2: return String.class;
			case 3: return Double.class;
			case 4: return Double.class;
			
		}
	
		return String.class;
	}

	@Override
	public int getColumnCount() {
		// TODO Auto-generated method stub
		return 9;
	}

	@Override
	public String getColumnName(int columnIndex) {
		// TODO Auto-generated method stub
		switch (columnIndex) {
			
			case 0: return "Id";
			case 1: return "Título";
			case 2: return "Ano";
			case 3: return "Gênero";
			case 4: return "Distribuidora";
			case 5: return "Franquia";
			case 6: return "Número de Episódios";
			case 7: return "Número de Temporadas";
			case 8: return "Tipo de Série";
		
		}
		
		return "";
	}

	@Override
	public int getRowCount() {
		// TODO Auto-generated method stub
		return listaSeries.size();
	}

	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		// TODO Auto-generated method stub
		Serie s = listaSeries.get(rowIndex);
		
		
		switch (columnIndex) {
		
			case 0: return s.getId();
			case 1: return s.getTitulo();
			case 2: return s.getAno();
			case 3: return s.getGenero();
			case 4: return s.getDistribuidora();
			case 5: return s.getFranquia();
			case 6: return s.getNumEpisodios();
			case 7: return s.getNumTemporadas();
			case 8: return s.getTipoSerie();
			
		}
	
		return "";
	}

	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void removeTableModelListener(TableModelListener l) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
		// TODO Auto-generated method stub
		
	}
	
	public Serie retornarLinha(int linha) {
		return listaSeries.get(linha);
	}
	
}
